const mongoose = require('mongoose');

const {Schema} = mongoose;
var ObjectId = require('mongodb').ObjectID;

// User : id auto generated by mongoDB
const userSchema = new Schema({
  username: { 
    type: String, 
    required: true 
  },//max length
  password: { 
    type: String, 
    required: true , 
    minlength: 6 
  },
  firstname:{ 
    type: String, 
    required: true 
  },
  lastname: { 
    type: String, 
    required: true 
  },
  email:    { 
    type: String, 
    required: true 
  },
  isAdmin:  { 
    type: Boolean, 
    default: false 
  },
  isBanned: { 
    type: Boolean, 
    default: false 
  }
});

// Static allows to define objects for the whole schema 
userSchema.statics.allBanned = function () {
  return this.updateMany({},{isBanned: true});
};
userSchema.statics.allUnBanned = function () {
  return this.updateMany({},{isBanned: false});
};
// Methods allows to define objects on an instantce of a schema
userSchema.methods.toggleIsAdmin = function () {
  this.isAdmin = !this.isAdmin ;
  return this.save() ;
}
userSchema.methods.toggleIsBanned = function () {
  this.isBanned = !this.isBanned ;
  return this.save() ;
}

// Virtual allows to create properties in schemas only in the server side , not on the DB .
// uses : ex (getter $ setters) ,update fnames and lnames from a full name
//example : add the property of full Name that doesnt exist in the DB
userSchema.virtual('fullName').get(function () {
  return `${this.firstName} ${this.lastName}`
})

const User = mongoose.model('User', userSchema);

module.exports = User;